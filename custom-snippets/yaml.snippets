snippet pod "kubernetes Pod"
apiVersion: v1
kind: Pod
metadata:
  name: ${1:PodName}
  namespace: ${2:Namespace}
  labels:
    ${3:app: $1}
spec:
  containers:
    - name: ${5:$1}
      image: ${6:ImageName}
      ports:
        - name: http
          containerPort: 80
          protocol: TCP
endsnippet
snippet dsi! "Deployment, service, and ingress" !b
apiVersion: apps/v1
kind: Deployment
metadata:
	name: ${1:some-controller}
	namespace: ${2:default}
spec:
	replicas: 1
	selector:
		matchLabels:
			$3
	template:
		metadata:
			labels:
				${3:app: $1}
		spec:
			containers:
			- name: ${4:name}
				image: ${5:nginx}
				imagePullPolicy: Always
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: ${6:8080}
---
apiVersion: v1
kind: Service
metadata:
	name: $1
	namespace: $2
spec:
	ports:
	- port: ${7:80}
		targetPort: $6
	selector:
		$3
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
	annotations:
		nginx.ingress.kubernetes.io/rewrite-target: /
		kubernetes.io/ingress.class: nginx
		cert-manager.io/cluster-issuer: "letsencrypt-prod"
	name: $1
	namespace: $2
spec:
	${10:tls:
	- secretName: ${9:$8.tls}
		hosts:
		- $8
	}rules:
	- host: ${8:host}
		http:
			paths:
			- path: ${11:/}
				pathType: Prefix
				backend:
					service:
						name: $1
						port:
							number: $7
endsnippet
snippet ds! "Deployment and service" !b
apiVersion: apps/v1
kind: Deployment
metadata:
	name: ${1:some-controller}
	namespace: ${2:default}
spec:
	replicas: 1
	selector:
		matchLabels:
			$3
	template:
		metadata:
			labels:
				${3:app: $1}
		spec:
			containers:
			- name: ${4:name}
				image: ${5:nginx}
				imagePullPolicy: Always
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: ${6:8080}
---
apiVersion: v1
kind: Service
metadata:
	name: $1
	namespace: $2
spec:
	ports:
	- port: ${7:80}
		targetPort: $6
	selector:
		$3
endsnippet
snippet pv "PersistentVolume" !b
apiVersion: v1
kind: PersistentVolume
metadata:
	name: ${1:name}
	labels:
		app: ${2:app}
		tier: ${3:tier}
spec:
	capacity:
		storage: ${4:20Gi}
	accessModes:
		- ${5:ReadWriteMany}
	nfs:
		server: ${6:NameOrIP}
		path: ${7:"/share/path/on/server"}
endsnippet

snippet pvc "PersistentVolumeClaim" !b
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
	name: ${1:name}
	labels:
		# insert any desired labels to identify your claim
		app: ${2:app}
		tier: ${3:tier}
spec:
	${4:storageClassName: ${5:standard}}
	accessModes:
		- ${6:ReadWriteOnce}
	resources:
		requests:
			# The amount of the volume's storage to request
			storage: ${7:20Gi}
endsnippet

snippet ing "Ingress" !b
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
	annotations:
		nginx.ingress.kubernetes.io/rewrite-target: /
		kubernetes.io/ingress.class: nginx
		cert-manager.io/cluster-issuer: "letsencrypt-prod"
	name: ${1:name}
	namespace: ${2:default}
spec:
	${5:tls:
	- secretName: ${4:$3.tls}
		hosts:
		- $3
	}rules:
	- host: ${3:host.tld}
		http:
			paths:
			- path: ${7:/}
				pathType: Prefix
				backend:
					service:
						name: ${8:service}
						port:
							number: ${9:portNumberOrName}
endsnippet

snippet ns "Namespace" !b
apiVersion: v1
kind: Namespace
metadata:
	name: ${1:name}
endsnippet
snippet cfg "ConfigMap" !b
apiVersion: v1
kind: ConfigMap
metadata:
	name: ${1:name}
data:
	${2:key}: ${3:value}
endsnippet

snippet sec "Secret" !b
apiVersion: v1
kind: Secret
metadata:
	name: ${1:secret-name}
type: ${2:Opaque}
data:
	${3:key}: ${4:value}
endsnippet
